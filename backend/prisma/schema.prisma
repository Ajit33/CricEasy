generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  tournaments Tournament[] // One user can create many tournaments
  createdAt   DateTime     @default(now())
}

model Tournament {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime
  place     String
  creatorId Int // Foreign key to User
  creator   User     @relation(fields: [creatorId], references: [id])
  teamSize  Int
  teams     Team[] // One tournament can have many teams
  matches   Match[] // One tournament can have many matches
}

model Team {
  id           Int        @id @default(autoincrement())
  name         String
  tournamentId Int // Foreign key to Tournament
  players      Player[] // One team can have many players
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  
}

model Player {
  id           Int          @id @default(autoincrement())
  name         String
  teamId       Int          // Foreign key to Team
  team         Team         @relation(fields: [teamId], references: [id])
  
  // Relationships with MatchEvent
  asStriker    MatchEvent[] @relation("Striker")      
  asNonStriker MatchEvent[] @relation("NonStriker")   
  asBowler     MatchEvent[] @relation("Bowler")      

  createdAt    DateTime     @default(now())
}

model Match {
  id           Int          @id @default(autoincrement())
  date         DateTime
  location     String
  tournamentId Int // Foreign key to Tournament
  tournament   Tournament   @relation(fields: [tournamentId], references: [id])
  team1Id      Int // Foreign key to Team 1

  team2Id      Int // Foreign key to Team 2
 
  events       MatchEvent[] // Match events (runs, wickets, etc.)
  result       String?      // Optional: Match result
  createdAt    DateTime     @default(now())
}

model MatchEvent {
  id          Int      @id @default(autoincrement())
  matchId     Int      // Foreign key to Match
  match       Match    @relation(fields: [matchId], references: [id]) // Relation to Match
  over        Int      // Over number
  ball        Int      // Ball number in the over
  
  // Relationships with players
  strikerId   Int      
  striker     Player   @relation("Striker", fields: [strikerId], references: [id]) 

  nonStrikerId Int     // Foreign key to Player (non-striker)
  nonStriker   Player   @relation("NonStriker", fields: [nonStrikerId], references: [id]) 

  bowlerId    Int      // Foreign key to Player (bowler)
  bowler      Player   @relation("Bowler", fields: [bowlerId], references: [id]) 
  
  runs        Int      
  isBoundary  Boolean  
  isWide      Boolean  
  isWicket    Boolean  

  createdAt   DateTime @default(now())
}


